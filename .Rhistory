install_from_swirl("R Programming")
library("swirl")
library(swirl)
install_course_zip("~/Downloads/swirl_courses-master.zip", multi=TRUE, which_course="R Programming")
install_course_zip("C:\Users\USBAMKT\Downloads\swirl_courses-master.zip", multi=TRUE)
install_course_zip("~\Downloads\swirl_courses-master.zip", multi=TRUE)
install_course_zip("~/Downloads/swirl_courses-master.zip", multi=TRUE)
install_course_zip("~\Downloads\swirl_courses-master.zip", multi=TRUE)
install_course_zip("~/Downloads/swirl_courses-master.zip", multi=TRUE)
touch(C:\Users\USBAMKT\Downloads)
touch("~/Downloads/swirl_courses-master.zip")
library(swirl)
install_course_zip("~/Downloads/swirl_courses-master.zip", multi=TRUE)
install_course_zip("~/Downloads/swirl_courses-master.zip", multi=TRUE)
install_course_zip("~/Downloads/swirl_courses-master.zip", multi=TRUE, which_course="R Programming")
dir ~
dir
dir.exists(~)
library(swirl)
swirl()
install_course_zip("~/Downloads/swirl_courses-master.zip", multi=TRUE)
install_course_zip("C:/Users/USBAMKT/Downloads/swirl_courses-master.zip", multi=TRUE)
swirl()
5+7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z -1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z * 2 + 1000
my_div
exit
exit()
help.start()
0
bye()
swirl()
getwd()
ls()
x <- 9
ls
ls()
dir()
list.files
?list.files
args(list.files())
args(list.files
)
old.dir <- ~
\
old.dir <- getwd()
dir.create(testdir)
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
ls()
list.files()
file.extist("mytest.R")
file.extists("mytest.R")
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path(mytest3.R")
file.path(mytest3.R")
file.path("mytest3.R")
file.path(folder1,folder2)
file.path("folder1","folder2)
file.path("folder1","folder2)
file.path("folder1","folder2")
?dir.create
dir.create(file.path("testdir2","testdir3"))
dir.create(file.path("testdir2","testdir3"),TRUE)
dir.create(file.path("testdir2","testdir3"),recursive = TRUE)
unlink("testdir2",recursive = TRUE)
setwd(old.dir)
unlink("testdir")
unlink("testdir", recusrsive = TRUE)
unlink("testdir", recursive = TRUE)
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10,by=0.5)
seq(5,10, length = 30)
my_seq <- seq(5,10, length = 30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0,1,2), times = 10)
rep(c(0,1,2), each = 10)
c(0.5,55,-10,6)
num_vect <- c(0.5,55,-10,6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My","name","is")
mychar
my_char
paste(my_char, collapse = " ")
my_name = c(my_char, "Matt")
my_name
paste(my_name,Collapse = " "
)
paste(my_name,Collapse = " ")
paste(my_name,collapse = " ")
paste("Hello","world!",sep = " ")
paste(1:3,c("X","Y","Z"),sep="")
paste(LETTERS),1:4,sep="-")
paste(LETTERS,1:4,sep="-")
library(swirl)
swirl()
x <- c(44,NA,5,NA)
x*3
y = rnorm(1000)
y <- rnorm(1000)
z <- rep(NA,1000)
my_data <- sample(c(y,z),100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
inf - inf
Inf - Inf
X <- 1:4
Y <- 2
X + Y
x <- list(2,"a","b", TRUE)
x
x[[2]]
x ,- c(3,5,1,10,12,6)
x <- c(3,5,1,10,12,6)
x
x[x %in% 1:5] <- 0
x
dir Coursera
cd Coursera
setwd ~/Coursera/2 R Programing
setwd "~/Coursera/2 R Programing"
setwd("~/Coursera/2 R Programing")
setwd("~/Coursera/2 R Programing")
?setwd
getwd
getwd()
setwd(getwd() & "/Coursera/2 R Programming")
setwd(paste(getwd(),"/Coursera/2 R Programming"))
setwd(paste(getwd(),"/Coursera/2-R Programming"))
setwd("C:\Users\USBAMKT\Documents\Coursera\2-R Programming")
setwd("C:/Users/USBAMKT/Documents/Coursera/2-R Programming")
getwd()
con <- gzfile("rprog-data-quiz1_data.zip")
con
x <- read.table(con)
x <- readlines(con,2)
x <- readLines(con,2)
x <- readLines("hw1_data.csv",2)
x
x <- readLines("hw1_data.csv",3)
x
x <- read.table("hw1_data.csv",3)
x <- read.csv("hw1_data.csv")
x
rows(x)
table.rows(x)
x <- read.csv("hw1_data.csv")
$read.csv
?read
y <- x[1]
y
x[47]
x[[47]]
x[2,47]
x[47,2]
x[47,1]
y <- is.na(x)
x[1]
y <- is.na(x[1])
sum(y)
mean(y)
mean(x[1])
mean.default(x[1])
y <- x[1] <> NA
x["Ozone"]
x["Ozone"]
bax <- is.na(x$Ozone)
x[!bax]
x$Ozone[!bax]
mean(x$Ozone[!bax])
x
keep <- complete.cases(x)
keep
y = x[keep]
keep <- x[x$Ozone %in% 32:89]
x$Ozone %in% 32:89
y <- x$Solar.R[x$Ozone %in% 32:89]
y
mean(x$Solar.R[x$Ozone %in% 32:89])
good <- complete.cases(x$Solar.R[x$Ozone %in% 32:89])
mean(y[good])
good
xgood <- x[complete.cases(x)]
xgood <- complete.cases(x)
x[xgood]
xgood
clear
cl
clr
y <- complete.cases(x$SOlar[x$Ozone > 31 && x$Solar.R > 90])
y <- complete.cases(x$SOlar[x$Ozone > 31 & x$Solar.R > 90])
ozonegood <- = x$Ozone > 31
y <- x[x$Ozone > 31 & x$Solar.R > 90]
y <- x[x$Ozone > 31]
y <- x[x$Ozone %in% 32:1000]
y <- x[x$Ozone %in% 32:100]
y <- x$Solar.R[x$Ozone %in% 32:100]
y = x
y <- x
y
x$Ozone > 31
y = complete.cases(x)
y = complete.cases(x)  & x$Ozone > 31 & x$Solar.R > 90
mean(y)
good = complete.cases(x)  & x$Ozone > 31 & x$Solar.R > 90
good = complete.cases(x)  & x$Ozone > 31 & x$Temp > 90
y <- x$Solar.R[good]
mean(y)
good = complete.cases(x)  & x$Month == 6
y <- x$Temp[good]
mean(y)
good = x$Ozone > 31 & x$Temp > 90
y <- x$Solar.R[good]
mean(y)
filtered = x$Ozone > 31 & x$Temp > 90
good = !isna(filtered)
good = !is.na(filtered)
y <- x$Solar.R[good]
mean(y)
y
filtered
good
y <- x$Solar.R[good & filtered]
mean(y)
filtered = x$Month == 6
filtereddata = x$Temp[filtered]
good = !is.na(filtereddata)
y = filtereddata[good]
y
mean(y)
filtered = x$Month == 5
filtereddata = x$Temp[filtered]
max(filtereddata)
filtereddata
filtereddata = x$Ozone[filtered]
max(filtereddata)
filtereddata
good = !is.na(filtereddata)
y = filtereddata[good]
max(y)
filtered = x$Ozone > 31 & x$Temp > 90
filtereddata = x$Ozone[filtered]
good = !is.na(filtereddata)
y = filtereddata[good]
mean(y)
filtereddata = x$Solar.R[filtered]
good = !is.na(filtereddata)
y = filtereddata[good]
mean(y)
swirl()
library(swirl)
rm(list=ls())
swirl()
x
x[1:10]
x[is.na(x)]
x[!is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x<0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
manes(vect
)
manes(vect)
names(vect)
vect2 <- c(11,2, NA)
names(vect2) <- c("foo", "bar", "nrof")
names(vect2) <- c("foo", "bar", "norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
(TRUE != FALSE) == !(6 == 7)
6 >= -9 && !(6 > 7) && !(!TRUE)
!(8 > 4) ||  5 == 5.0 && 7.8 >= 7.79
dataset_url <- "http://s3.amazonaws.com/practice_assignment/diet_data.zip"
download.file(dataset_url, "diet_data.zip")
unzip("diet_data.zip", exdir = "diet_data")
list.files("diet_data")
andy <- read.csv("diet_data/Andy.csv")
head(andy)
length(andy$Day)
dim(andy)
str(andy)
summary(andy)
names(andy)
andy[1, "Weight"]
andy[30, "Weight"]
andy_start <- andy[1, "Weight"]
andy_end  <- andy[30, "Weight"]
andy_loss <- andy_start - andy_end
andy_loss
files <- list("diet_data")
files
files <- list.files("diet_data")
files
files[1]
files[2]
files[3:5]
head(read.csv(files[3]))
head(read.csv(files[3]))
files <- list.files("diet_data")
files
files_full <- list.files("diet_data", full.names=TRUE)
files_full
head(read.csv(files[3]))
head(read.csv(files_full[3]))
andy_david <- rbind(andy, read.csv(files_full[2]))
head(andy_david)
tail(andy_david)
day_25 <- andy_david[which(andy_david$Day == 25), ]
day_25
for (i in 1:5) {print(i)}
dat <- data.frame()
for (i in 1:5) {
dat <- rbind(dat, read.csv(files_full[i]))
}
str(dat)
median(dat$Weight)
dat
median(dat$Weight, na.rm = TRUE)
weightmedian <- function(directory, day) { # content of the function }
weightmedian <- function(directory, day)  {
files_list <- list.files(directory, full.names=TRUE)   #creates a list of files
dat <- data.frame()                             #creates an empty data frame
for (i in 1:5) {
#loops through the files, rbinding them together
dat <- rbind(dat, read.csv(files_list[i]))
}
dat_subset <- dat[which(dat[, "Day"] == day),]  #subsets the rows that match the 'day' argument
median(dat_subset[, "Weight"], na.rm=TRUE)      #identifies the median weight
#while stripping out the NAs
}
weightmedian("diet_data", 4)
weightmedian("diet_data", 17)
add2 <- function(x, y) {
x + y
}
add2(3,5)
above <- function(x,n) {
use  <- x > n
x[use]
}
x <- 1:20
above(x,12)
above <- function(x,n = 10) {
use  <- x > n
x[use]
}
above(x)
means <- numeric(nc)
my_matrix
columnmean(my_matrix)
columnmean <- function(y, removeNA = TRUE) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i], na.rm = removeNA)
}
means
}
columnmean(my_matrix)
columnmean(my_matrix,FALSE)
View(my_vector)
View(columnmean)
View(my_vector)
View(my_matrix2)
View(my_matrix)
View(my_data)
library(swirl)
swirl()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function("My first function")
boring_function("My first function!")
boring_funciton
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd,c(1.4,3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[length(x)]}, c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("This", "is", "a", "test")
submit()
mad_libs(place = "OK", adjective = "angry", noun = "statue")
submit()
submit()
"I" %p% "love" %p% "R"
"I" %p% "love" %p% "R!"
search()
View(columnmean)
pi
phi
pi
e
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
x <- 1:10
if(x > 5) {
x <- 0
}
submit(cacheMatrixR)
submit()
paste(getwd(),"/ProgrammingAssignment2",sep = "")
setwd(paste(getwd(),"/ProgrammingAssignment2",sep = ""))
submut
submit
submit()
source("cachematrix.R")
amatrix$set(matrix(c(0,5,99,66)
)
)
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix
amatrix$get()
amatrix$getinverse()
amatrix$setinverse()
m
source("cachematrix.R")
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
amatrix$getinverse()
source("cachematrix.R")
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
m
amatrix
source('~/Coursera/2-R Programming/ProgrammingAssignment2/cachematrix.R')
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$getinverse()
amatrix$get()
source('~/Coursera/2-R Programming/ProgrammingAssignment2/cachematrix.R')
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
amatrix$getinverse()
cacheSolve(amatrix)
cacheSolve(amatrix)
amatrix$getinverse()
source('~/Coursera/2-R Programming/ProgrammingAssignment2/cachematrix.R')
source('~/Coursera/2-R Programming/ProgrammingAssignment2/cachematrix.R')
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$getinverse()
amatrix$get()
cacheSolve(amatrix)
amatrix$getinverse()
cacheSolve(amatrix)
